Out of Boundary Paths
class Solution {
public:
    
    long int mod = 1e9+7;
   int utility(int m, int n, int max, int i, int j, vector<vector<vector<int>>>&dp)
    {
       
        if(i==m || j==n || i<0 || j<0)
            return 1;
    
        if(max<=0) 
            return 0;
       
        if(dp[i][j][max] != -1 ) return dp[i][j][max];
       
        int left = utility(m, n, max-1, i+1, j, dp);
        int right = utility(m, n, max-1, i, j+1, dp);
        int up = utility(m, n, max-1, i-1, j, dp);
        int down = utility(m, n, max-1, i, j-1, dp);
       
        return dp[i][j][max] = (left%mod + right%mod + up%mod + down%mod) % mod;
    }
    int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
           vector<vector<vector<int>>> dp(m, vector<vector<int>>(n, vector<int>(maxMove+1, -1)));
        return utility(m, n, maxMove, startRow, startColumn, dp);
        
    }
};

Roman to Integer
class Solution {
public:
    int romanToInt(string s) {
      int sum=0;
        map<char,int> m;
        m['I']=1;
        m['V']=5;
        m['X']=10;
        m['L']=50;
         m['C']=100;
         m['D']=500;
         m['M']=1000;
        
        for(int i=0;i<s.length();i++)
        {
           sum+=m[s[i]];
            if(i>0)
            {
             if(s[i]=='V' && s[i-1]=='I')
              {
                sum-=2;
              }
              else if(s[i]=='X' && s[i-1]=='I'){
                    sum-=2;
                }
             else if(s[i]=='L' && s[i-1]=='X')
             {
                 sum-=20;
             }
             else if(s[i]=='C' && s[i-1]=='X')
             {
                 sum-=20;
             }
             else if(s[i]=='D' && s[i-1]=='C')
             {
                 sum-=200;
             }
             else if(s[i]=='M' && s[i-1]=='C')
             {
                 sum-=200;
             }
          }
        }
        return sum;
   }
};
