Two Sum
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) 
    {
       for(int i=0;i<nums.size();i++)
       {
           for(int j=i+1;j<nums.size();j++)
           {
               if(nums[i]+nums[j]==target){
                   return {i,j};
               }
                
           }
       }
       return {-1,-1};
    }
};

Merge Sorted Array
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int j=0;
        for(int i=m;i<(n+m);i++)
        {
          nums1[i] = nums2[j];
            j++;
        }
        sort(nums1.begin(),nums1.end());
    }
};

Candy
class Solution {
public:
    int candy(vector<int>& ratings) {
       int n = ratings.size();
        int candy = n, i=1;
        while(i<n){
            if(ratings[i] == ratings[i-1]){
                i++;
                continue;
            }
            
            //For increasing slope
            int peak = 0;
            while(ratings[i] > ratings [i-1]){
                peak++;
                candy += peak;
                i++;
                if(i == n) return candy;
            }
            
            //For decreasing slope
            int valley = 0;
            while(i<n && ratings[i] < ratings[i-1]){
                valley++;
                candy += valley;
                i++;
            }
            candy -= min(peak, valley); //Keep only the higher peak
        }
        return candy; 
    }
};

Longest Consecutive Sequence
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
       
        int count=1,n=nums.size(),res=0;
        if(n==0)
            return 0;
        sort(nums.begin(),nums.end());
        for(int i=1;i<n;i++)
        {
            if(nums[i]==nums[i-1]+1)
            {
                count++;
            }
           else if(nums[i]!=nums[i-1]){
                res=max(count,res);
                count=1;
           }
        }
         res=max(count,res);
        return res;
    }
};

