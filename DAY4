Merge Two Sorted Arrays
#include <bits/stdc++.h> 
vector<int> ninjaAndSortedArrays(vector<int>& arr1, vector<int>& arr2, int m, int n) {
	// Write your code here.
    int j=0;
    for(int i=m;i<m+n;i++)
    {
        arr1[i]=arr2[j];
        j++;
    }
    sort(arr1.begin(),arr1.end());
    return arr1;       
}

Interleaving String
class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        vector<vector<int>>dp(s1.size()+1,(vector<int>(s2.size()+1,0)));
        if(s3.size()!=s1.size()+s2.size()){
            return false;
        }
        for(int i=s1.size();i>=0;i--){
            for(int j=s2.size();j>=0;j--){
                int k=i+j;
                if(i==s1.size()&&j==s2.size()){
                    dp[i][j]=1;
                }
                else if(s3[k]==s2[j]&&s3[k]==s1[i]){
                    dp[i][j]= dp[i+1][j]||dp[i][j+1];
                }
                else if(s1[i]==s3[k]){
                    dp[i][j]= dp[i+1][j];
                }
                else if(s3[k]==s2[j]){
                    dp[i][j]= dp[i][j+1];
                }
                else{
                    dp[i][j]= false;
                }  
            }
        }
        return dp[0][0]; 
    }
};

Best Time to Buy and Sell Stock
#include <bits/stdc++.h> 
int maximumProfit(vector<int> &prices){
    // Write your code here.
    int mn=INT_MAX;
    int maxprofit=0,profit=0;
    for(int i=0;i<prices.size();i++)
    {
        if(prices[i]<mn){
            mn=prices[i];
        }
         profit=prices[i]-mn;
        maxprofit=max(profit,maxprofit);
     }
    return maxprofit;
}

Pascal's Triangle
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
      vector<vector<int>> res;
        int x=1;
        for(int i=0;i<numRows;i++)
        {
            vector<int> v{};
            for(int j=0;j<=i;j++)
            {
                if(j==0 || j==i){
                    x=1;
                }
                else{
                    x=x*(i-j+1)/j;
                }
                v.push_back(x);
            }
            res.push_back(v);
        }
        return res;
    }
};

Reshape the Matrix
class Solution {
public:
    vector<vector<int>> matrixReshape(vector<vector<int>>& mat, int r, int c) {
         if(c*r!=mat.size()*mat[0].size())
        return mat;
         vector<vector<int>> ans(r,vector<int>(c,0));
      vector<int>v;
      for(int i=0;i<mat.size();i++)
      {
        for(int j=0;j<mat[0].size();j++)
        {
          v.push_back(mat[i][j]);
        }
      }
      int k=0;
      for(int i=0;i<r;i++)
      {
        for(int j=0;j<c;j++)
        {
          ans[i][j]=v[k++];
        }
      }
      return ans;
    }
};

Longest Consecutive Sequence
#include <bits/stdc++.h> 
int lengthOfLongestConsecutiveSequence(vector<int> &arr, int n) {
    // Write your code here.
      int res=1,mx=0;
      sort(arr.begin(),arr.end());
      for(int i=1;i<n;i++)
      {
          if(arr[i]==arr[i-1]+1)
          {
              res++;
          }
          else if(arr[i]!=arr[i-1])
          {
              mx=max(res,mx);
              res=1;
          }
      }
          mx=max(res,mx);
          return mx;     
}
