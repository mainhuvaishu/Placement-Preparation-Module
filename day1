DSA leetcode
Contains Duplicate
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        int ans=0;
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size()-1;i++)
        {
           // cout<<nums[i];
            if(nums[i]==nums[i+1])
               ans++;
             
        }
        if(ans>0)
            return true;
        else 
            return false;
    }
};

Maximum Subarray
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
       int sum=0,mx=INT_MIN;
        for(int i=0;i<nums.size();i++)
        {
            sum+= nums[i];
             mx = max(sum,mx);
        if(sum<0)
        {
            sum=0;
        }
       } 
        return mx;
        
    }
};

Sort 0 1 2
#include <bits/stdc++.h> 
void sort012(int *arr, int n)
{
   //   Write your code here
    int low=0,high=n-1,mid=0;
    while(mid<=high)
    {
      if(arr[mid]==0)
      {
          swap(arr[mid],arr[low]);
          mid++;
          low++;
       }
        else if(arr[mid]==1)
        {
            mid++;
        }
        else
        {
            swap(arr[mid],arr[high]);
            high--;
        }
    }   
}

Wiggle Subsequence
class Solution {
public:
    int wiggleMaxLength(vector<int>& nums) 
    {
        int dec=1,inc =1;
        for(int i=1;i<nums.size();i++)
        {
            if(nums[i]>nums[i-1])
            {
                inc=dec+1;
            }
            else if(nums[i]<nums[i-1])
                dec=inc+1;
        }
        return max(inc,dec);
        
    }
};
